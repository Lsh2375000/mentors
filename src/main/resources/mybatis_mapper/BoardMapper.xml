<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.nomadlab.mentors.board.mapper.BoardMapper">

    <!-- BoardVO에 대한 resultMap 설정 -->
    <resultMap id="boardResultMap" type="kr.nomadlab.mentors.board.domain.BoardVO">
        <id property="boardNo" column="boardNo" />
        <result property="mno" column="mno" />
        <result property="writer" column="writer" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="hit" column="hit" />
        <result property="addDate" column="addDate" />
        <!-- boardReply, boardLike에 대한 매핑 -->
        <result property="replyCount" column="replyCount" />
        <result property="likeCount" column="likeCount" />
        <!-- HashTag에 대한 매핑 -->
        <collection property="tagVOList" column="boardNo" ofType="kr.nomadlab.mentors.board.domain.HashTagVO"
                    select="selectTagList" />
    </resultMap>

    <select id="selectTagList" resultType="kr.nomadlab.mentors.board.domain.HashTagVO" >
        SELECT *
        FROM `hashTag` AS `ht`
        WHERE `ht`.`boardNo` = #{boardNo}
    </select>

    <!-- 게시글 전체 조회 -->
    <select id="selectBoardList" resultMap="boardResultMap">
        SELECT
        `b`.*,
        COUNT(DISTINCT `br`.`rno`) AS replyCount,
        COUNT(DISTINCT `bl`.`blNo`) AS likeCount
        FROM `board` AS `b`
        LEFT JOIN `boardReply` AS `br` ON `b`.`boardNo` = `br`.`boardNo`
        LEFT JOIN `boardLike` AS `bl` ON `b`.`boardNo` = `bl`.`boardNo`
        LEFT JOIN `hashTag` AS `ht` ON `b`.`boardNo` = `ht`.`boardNo`
        <include refid="search"/>
        GROUP BY `b`.`boardNo`
        ORDER BY
        <!-- 정렬 조건 -->
        <choose>
            <when test="sort == 'reply'">replyCount</when>
            <when test="sort == 'like'">likeCount</when>
            <!-- 추가적인 컬럼이 있으면 위와 같이 추가 -->
            <otherwise>b.boardNo</otherwise>
        </choose>
        <!-- 여기까지 -->
        DESC LIMIT #{skip}, #{size}
    </select>

    <sql id="search">
        <where>
            <if test="types != null and types.length > 0">
                <foreach collection="types" item="type" open="(" close=")" separator=" OR">
                    <if test="type == 't'.toString()">
                        `b`.`title` like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'w'.toString()">
                        `b`.`writer` like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'c'.toString()">
                        `b`.`content` like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>

            <if test="hashTags != null and hashTags.length > 0">
                <foreach collection="hashTags" item="hashTag" open=" AND (" close=")" separator=" OR ">
                    `ht`.`tagName` = #{hashTag}
                </foreach>
            </if>
        </where>
    </sql>

    <!-- 게시글 등록 -->
    <insert id="insertBoard" parameterType="kr.nomadlab.mentors.board.domain.BoardVO" useGeneratedKeys="true" keyProperty="boardNo">
        INSERT INTO `board` (`mno`, `writer`, `title`, `content`,  `hit`, `addDate`)
        VALUES (#{mno}, #{writer}, #{title}, #{content}, 0, NOW())
    </insert>

    <!-- 상위 10개 태그 조회 -->
    <select id="selectTopTagList" resultType="kr.nomadlab.mentors.board.dto.HashTagDTO">
        SELECT tagName, COUNT(tagName) AS tagCount
        FROM hashTag
        GROUP BY tagName
        ORDER BY tagCount DESC
        LIMIT 10;
    </select>

    <!-- 태그 등록 -->
    <insert id="insertTag">
        INSERT INTO `hashTag` (`boardNo`, `tagName`) VALUES (#{boardNo}, #{tagName})
    </insert>

    <!-- 태그 삭제 -->
    <delete id="deleteTag">
        DELETE FROM `hashTag` WHERE `boardNo` = #{boardNo}
    </delete>

    <!-- 게시글 수정 -->
    <update id="updateBoard">
        update `board` set `title` = #{title}, `content` = #{content}
        where `boardNo` = #{boardNo}
    </update>

    <!-- 조회수 업데이트 -->
    <update id="updateHit">
        update `board` set `hit` = `hit` + 1 where `boardNo` = #{boardNo}
    </update>

    <!-- 게시글 삭제 -->
    <delete id="deleteBoard">
        delete from `board` where `boardNo` = #{boardNo}
    </delete>

    <!-- 게시글 조회 -->
    <select id="selectBoard" resultMap="boardResultMap">
        SELECT *
        FROM `board`
        WHERE `boardNo` = #{boardNo}
    </select>

    <!-- 게시글 좋아요 추가 -->
    <insert id="insertLike" parameterType="kr.nomadlab.mentors.board.domain.BoardLikeVO" useGeneratedKeys="true" keyProperty="blNo">
        INSERT INTO `boardLike`(`boardNo`, `mno`) VALUES (#{boardNo}, #{mno})
    </insert>

    <!-- 게시글 좋아요 삭제 -->
    <delete id="deleteLike">
        delete from `boardLike` where `blNo` = #{blNo}
    </delete>

    <!-- 좋아요 조회 -->
    <select id="selectLikeList" resultType="kr.nomadlab.mentors.board.domain.BoardLikeVO">
        SELECT * FROM `boardLike` WHERE `boardNo` = #{boardNo}
    </select>

    <!--게시물 갯수-->
    <select id="getCount" resultType="int">
        SELECT COUNT(DISTINCT `b`.`boardNo`)
        FROM `board` AS `b`
        LEFT JOIN `hashTag` AS `ht` ON `b`.`boardNo` = `ht`.`boardNo`
        <include refid="search" />
    </select>

    <!-- 본인 게시글 전체 조회 -->
    <select id="selectMyBoardList" resultMap="boardResultMap">
        SELECT
        `b`.*,
        COUNT(DISTINCT `br`.`rno`) AS replyCount,
        COUNT(DISTINCT `bl`.`blNo`) AS likeCount
        FROM `board` AS `b`
        LEFT JOIN `boardReply` AS `br` ON `b`.`boardNo` = `br`.`boardNo`
        LEFT JOIN `boardLike` AS `bl` ON `b`.`boardNo` = `bl`.`boardNo`
        WHERE `b`.`mno` = #{mno}
        GROUP BY `b`.`boardNo`
        ORDER BY
        `b`.`boardNo` DESC LIMIT #{skip}, #{size}
    </select>

    <!-- 본인 게시물 갯수-->
    <select id="getMyCount" resultType="int">
        SELECT COUNT(`boardNo`)
        FROM `board`
        WHERE `mno` = #{mno};
    </select>

</mapper>
