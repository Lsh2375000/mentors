<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.nomadlab.mentors.admin.mapper.AdminMapper">

    <resultMap id="getAdmin" type="kr.nomadlab.mentors.admin.domain.AdminVO">
        <id property="ano" column="ano"></id>
        <result property="adminId" column="AdminId"></result>
        <result property="passwd" column="passwd"></result>
        <collection property="roleSet" javaType="java.util.HashSet" ofType="int">
            <result property="role_set" column="role_set"></result>
        </collection>
    </resultMap>

    <insert id="addAdmin">
        insert into `adminAccount` (`adminId`, `passwd`)
        VALUES (#{adminId}, #{passwd})
    </insert>

    <insert id="addMemberRole">
        insert into `admin_role_set` (`adminId`, `role_set`)
        VALUES (#{adminId}, #{role_set})
    </insert>

    <select id="getAdminId" resultMap="getAdmin" parameterType="String">

        select `a`.*, `ars`.`role_set`
        from `adminAccount` `a`
                 left join `member_role_set` `ars`
                           on `a`.`adminId` = `ars`.`memberId`
        where `a`.`adminId` = #{adminId}

    </select>

    <select id="getApplyList" resultType="kr.nomadlab.mentors.member.domain.MentorApplyVO">
        select * from `mentorApply`
    </select>

    <select id="getApplyOne" resultType="kr.nomadlab.mentors.member.domain.MentorApplyVO">
        select *
        from `mentorApply`
        where `mno` = #{mno};
    </select>

    <delete id="removeApplyOne">
        delete from `mentorApply` where `mno` = #{mno}
    </delete>


    <update id="changeRole">
        update `member_role_set`
        set `role_set` = 0
        where `memberId` = #{memberId};
    </update>


    <sql id="exSearch">
        <where>
            <if test="types != null and types.length > 0">
                <foreach collection="types" item="type" open="(" close=")" separator=" OR">
                    <if test="type.equals('mno')">
                        `mno` like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type.equals('memberName')">
                        `memberName` like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type.equals('bank')">
                        `bank` like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
            <if test="up != null and down != null">
                <trim prefix="and">
                    `amount` between #{up} and #{down}
                </trim>
            </if>
            and isComplete != 1
            <if test="from != null and to != null">
                <trim prefix="and">
                    `addDate` between #{from} and #{to}
                </trim>
            </if>
        </where>
    </sql>
    <select id="getExSearchAll" resultType="kr.nomadlab.mentors.exChange.vo.ExchangeVO">
        select * from `exchange`
        <include refid="exSearch"></include>
        order by `exNo` desc
    </select>
    <sql id="exedSearch">
        <where>
            <if test="types != null and types.length > 0">
                <foreach collection="types" item="type" open="(" close=")" separator=" OR">
                    <if test="type.equals('mno')">
                        `mno` like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type.equals('memberName')">
                        `memberName` like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type.equals('bank')">
                        `bank` like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
            <if test="up != null and down != null">
                <trim prefix="and">
                    `amount` between #{up} and #{down}
                </trim>
            </if>
            and isComplete = 1
            <if test="from != null and to != null">
                <trim prefix="and">
                    `addDate` between #{from} and #{to}
                </trim>
            </if>
        </where>
    </sql>
    <select id="getExedSearchAll" resultType="kr.nomadlab.mentors.exChange.vo.ExchangeVO">
        select * from `exchange`
        <include refid="exedSearch"></include>
        order by `exNo` desc
    </select>
    <select id="getExchangeInfo" resultType="kr.nomadlab.mentors.exChange.vo.ExchangeVO">
        select * from `exchange` where exNo = #{exNo}
    </select>
    <update id="exchangeComplete">
        update `exchange` set isComplete = true, completeDate = now() where exNo=#{exNo}
    </update>
</mapper>
